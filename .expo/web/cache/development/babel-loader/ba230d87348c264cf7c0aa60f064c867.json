{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\workspace\\\\TestExpo\\\\testApp13\\\\components\\\\LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport firebase from 'firebase';\n\nvar LoginScreen = function (_React$Component) {\n  _inherits(LoginScreen, _React$Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this);\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _this.onSignIn = function (googleUser) {\n      console.log('Google Auth Response', googleUser);\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n          firebase.auth().signInAndRetrieveDataWithCredential(credential).then(function (result) {\n            console.log('user signed in');\n\n            if (result.additionalUserInfo.isNewUser) {\n              firebase.database().ref('/users/' + result.user.uid).set({\n                gmail: result.user.email,\n                profile_picture: result.additionalUserInfo.profile.picture,\n                locale: result.additionalUserInfo.profile.locale,\n                first_name: result.additionalUserInfo.profile.given_name,\n                last_name: result.additionalUserInfo.profile.family_name,\n                created_at: Date.now(),\n                last_logged_in: Date.now()\n              }).then(function (snapshot) {});\n            } else {\n              firebase.database().ref('/users/' + result.user.uid).update({\n                last_logged_in: Date.now()\n              });\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            var email = error.email;\n            var credential = error.credential;\n          });\n        } else {\n          console.log('User already signed-in Firebase.');\n        }\n      }.bind(_assertThisInitialized(_this)));\n    };\n\n    _this.signInWithCoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Expo.Google.logInAsync({\n                behavior: 'web',\n                androidClientId: \"1067985065985-smn8rm8ftrkitippk0dgv3v33vnaum9b.apps.googleusercontent.com\",\n                scopes: [\"profile\", \"email\"]\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === 'success')) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 9:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    console.ignoredYellowBox = ['Setting a timer'];\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('loginScreen.js');\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.signInWithCoogleAsync();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 73\n        }\n      }, \"Sign In With Google\")), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('DashboardScreen', {});\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 98\n        }\n      }, \"next time\")));\n    }\n  }]);\n\n  return LoginScreen;\n}(React.Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["E:/workspace/TestExpo/testApp13/components/LoginScreen.js"],"names":["React","firebase","LoginScreen","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","console","log","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInAndRetrieveDataWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","gmail","email","profile_picture","profile","picture","locale","first_name","given_name","last_name","family_name","created_at","Date","now","last_logged_in","snapshot","update","catch","error","errorCode","code","errorMessage","message","bind","signInWithCoogleAsync","Expo","Google","logInAsync","behavior","androidClientId","scopes","type","cancelled","ignoredYellowBox","styles","container","fontSize","props","navigation","navigate","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View, Button, TouchableOpacity } from 'react-native';\r\nimport firebase from 'firebase';\r\n\r\nexport default class LoginScreen extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    console.ignoredYellowBox = [\r\n    'Setting a timer'\r\n    ];\r\n  }\r\n\r\n  // firbase 함수\r\n  isUserEqual = (googleUser, firebaseUser) => {\r\n    if (firebaseUser) {\r\n      var providerData = firebaseUser.providerData;\r\n      for (var i = 0; i < providerData.length; i++) {\r\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n            providerData[i].uid === googleUser.getBasicProfile().getId()) {\r\n          // We don't need to reauth the Firebase connection.\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // firbase 함수\r\n  onSignIn = googleUser => {\r\n    console.log('Google Auth Response', googleUser);\r\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n    var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {\r\n      unsubscribe();\r\n      // Check if we are already signed-in Firebase with the correct user.\r\n      if (!this.isUserEqual(googleUser, firebaseUser)) {\r\n        // Build Firebase credential with the Google ID token.\r\n        var credential = firebase.auth.GoogleAuthProvider.credential(\r\n          googleUser.idToken,\r\n          googleUser.accessToken,\r\n        );\r\n        // Sign in with credential from the Google user.\r\n        firebase.auth().signInAndRetrieveDataWithCredential(credential).then(function(result){\r\n          console.log('user signed in');\r\n          if (result.additionalUserInfo.isNewUser) {\r\n            firebase.database().ref('/users/' + result.user.uid).set({\r\n              gmail: result.user.email,\r\n              profile_picture: result.additionalUserInfo.profile.picture,\r\n              locale: result.additionalUserInfo.profile.locale,\r\n              first_name: result.additionalUserInfo.profile.given_name,\r\n              last_name: result.additionalUserInfo.profile.family_name,\r\n              created_at: Date.now(),\r\n              last_logged_in:Date.now()\r\n            }).then(function (snapshot){\r\n              // console.log('snapshot', snapshot)\r\n            });\r\n          } else {\r\n            firebase.database().ref('/users/' + result.user.uid).update({\r\n              last_logged_in:Date.now()\r\n            })\r\n          }\r\n        }).catch(function(error) {\r\n          // Handle Errors here.\r\n          var errorCode = error.code;\r\n          var errorMessage = error.message;\r\n          // The email of the user's account used.\r\n          var email = error.email;\r\n          // The firebase.auth.AuthCredential type that was used.\r\n          var credential = error.credential;\r\n          // ...\r\n        });\r\n      } else {\r\n        console.log('User already signed-in Firebase.');\r\n      }\r\n    }.bind(this));\r\n  };\r\n\r\n  signInWithCoogleAsync = async () => {\r\n    try {\r\n        const result = await Expo.Google.logInAsync({\r\n            behavior: 'web',\r\n            androidClientId: \"1067985065985-smn8rm8ftrkitippk0dgv3v33vnaum9b.apps.googleusercontent.com\",\r\n            scopes: [\"profile\", \"email\"]\r\n        })\r\n        if (result.type === 'success') {\r\n            this.onSignIn(result);\r\n            return result.accessToken;\r\n        } else  {\r\n          return { cancelled: true };\r\n        }\r\n    } catch (e) {\r\n        return { error: true }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    console.log('loginScreen.js')\r\n    return (\r\n      <View style={styles.container}>\r\n        <TouchableOpacity onPress={() => this.signInWithCoogleAsync()} ><Text style={{fontSize: 25}}>Sign In With Google</Text></TouchableOpacity>\r\n        <TouchableOpacity onPress={() => this.props.navigation.navigate('DashboardScreen', {})} ><Text style={{fontSize: 15}}>next time</Text></TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}